extends ui_layout_no

block content

  //-Change this URI to a CDN you are using for Photos
  -var cdn = "";
  .computer.only.tablet.only.four.wide.column
    .ui.card
      .image
        if user.profile.picture
          img(src='/user_post/'+user.profile.picture)
        else
          img(src=user.gravatar(60))
      .content
        a.header(href='/me')= user.profile.name || user.username || user.id
        .meta="@"+user.username
        .description=user.profile.bio
        .description
          if user.profile.location
            i.marker.icon
            span=user.profile.location
      .one.ui.bottom.attached.icon.buttons
          button.ui.editprofile.button(data-tooltip='Update Your Profile', data-position='bottom left')
            i.write.icon

  #loading.eight.wide.computer.ten.wide.tablet.sixteen.wide.mobile.column
    img.ui.centered.small.image(src='/public/heart.svg')
  #content.eight.wide.computer.ten.wide.tablet.sixteen.wide.mobile.column(style='display: none;')
    //-.ui.active.dimmer.feed
      .ui.large.text.loader Loading
    //- Input for creating new post at top of feed
    #newpost.ui.fluid.left.labeled.right.icon.input
      .ui.label
        if user.profile.picture
          img.ui.avatar.image(src='/user_post/'+user.profile.picture)
        else
          img.ui.avatar.image(src=user.gravatar(60))
      input(type='text', placeholder='Share your meal')
      i.big.photo.link.icon
    //- Input for new actor post
    if user.isAdmin
      #adminpost.ui.fluid.left.labeled.right.icon.input
        .ui.label
          if user.profile.picture
            img.ui.avatar.image(src='/user_post/'+user.profile.picture)
          else
            img.ui.avatar.image(src=user.gravatar(60))
        input(type='text', placeholder='Add a new actor post')
        i.big.photo.link.icon

    each val in script
      //- create a card for each post in val (if by user make the card a little different)
      //- if val.relativeTime - then post came from user_post (so user post, user reply to actor reply to user post)
      if val.relativeTime
        -var u_class;
        -if (val.actorAuthor) {u_class = "actorReply"}
        -else if (val.reply) {u_class = "userReply"}
        -else {u_class = "userPost"}
        .ui.fluid.card(u_postID=val.id, type=u_class, postID=val.postID)

          //- This is a User made post
          .content
            .right.floated.time.meta= (user.createdAt.getTime() + val.relativeTime)
            |
            a.ui.avatar.image(href='/me')
              if user.profile.picture
                img(src='/user_post/'+user.profile.picture)
              else
                img(src=user.gravatar(60))
            a(href='/me')
              span=user.profile.name || user.username || user.id
          .image
            img(src='/user_post/'+val.picture)
          .content
            .description=val.body
          .two.ui.bottom.attached.icon.buttons
            .ui.reply.button(tabindex='0')
              i.reply.icon
              |  Reply
            if val.liked
              .ui.red.like.button
                i.heart.icon
                |  Like
            else
              .ui.like.button
                i.heart.icon
                |  Like
          if val.comments.length > 0
            .content
              .ui.comments
                each comment in val.comments
                  //-IF this comment is USER made, do this
                  if (user.createdAt.getTime() + comment.time) < Date.now()
                    if !comment.flagged
                      if comment.new_comment
                        -console.log("New COMMENT AREA");
                        .comment(commentID=comment.commentID)
                          a.avatar.image(href='/me')
                            if user.profile.picture
                              img(src='/user_post/'+user.profile.picture)
                            else
                              img(src=user.gravatar(60))
                          .content
                            a.author(href='/me')=user.profile.name || user.username || user.id
                            .metadata
                              span.date=(user.createdAt.getTime() + comment.time)
                              .rating
                                if comment.liked
                                  i.red.heart.icon
                                  span=comment.likes
                                  | Likes
                                else
                                  i.heart.icon
                                  span.num=comment.likes
                                  |  Likes
                            .text=comment.body
                            .actions
                              if comment.liked
                                a.red.like.comment Like
                              else
                                a.like.comment Like
                              a.flag.comment Flag
                      //- Else this is a normal comment from the script
                      else
                        .comment(commentID=comment.commentID)
                          a.avatar(href='/user/'+comment.actor.username)
                            //-img(src=cdn+'/profile_pictures/'+comment.actor.profile.picture)
                            img.lazyload(data-src=cdn+"/profile_pictures/"+comment.actor.profile.picture)
                          .content
                            a.author(href='/user/'+comment.actor.username)=comment.actor.profile.name
                            .metadata
                              span.date=(user.createdAt.getTime() + comment.time)
                              .rating
                                if comment.liked
                                  i.red.heart.icon
                                  span=comment.likes
                                  | Likes
                                else
                                  i.heart.icon
                                  span.num=comment.likes
                                  |  Likes
                            .text=comment.body
                            .actions
                              if comment.liked
                                a.red.like.comment Like
                              else
                                a.like.comment Like
                              a.flag.comment Flag
          .extra.content
            .ui.fluid.left.labeled.right.icon.input
              .ui.label
                if user.profile.picture
                  img.ui.avatar.image(src='/user_post/'+user.profile.picture, name=user.profile.name || user.username || user.id)
                else
                  img.ui.avatar.image(src=user.gravatar(60), name=user.profile.name || user.username || user.id)
              input.newcomment(type='text', placeholder='Write a Comment')
              i.big.send.link.icon

      //-THIS is for posts by Actors, not the USER
      else
        .ui.fluid.card.dim(postID=val.id, state=val.state || 'unread', type='actor', actor_un = val.actor.username, actor_name = val.actor.profile.name, actor_pic = val.actor.profile.picture)
          //- dimmer DIV for flagging
          .ui.dimmer.flag
                .content
                  .center
                    h2.ui.inverted.icon.header
                      i.red.flag.icon
                      |  You&apos;ve flagged this!
                      h3.ui.inverted.header
                        span="The admins will review this post further. We are sorry you had this experience."
          //- Normal Base Post
          .content
            .right.floated.meta.time= (user.createdAt.getTime() + val.time)
            |
            .hiddentime(hidden='true')= (user.createdAt.getTime() + val.time)
            //-a(href='/user/'+val.actor.username)
              img.ui.avatar.image(src=cdn+'/profile_pictures/'+val.actor.profile.picture)
              span=val.actor.profile.name
            if user.isAdmin
              .actorDropdown(style='display: none;')
                .actor.ui.selection.dropdown
                  input(type='hidden', name='user')
                  i.dropdown.icon
                  .default.text
                    a(href='/user/'+val.actor.username)
                    img.ui.avatar.image.lazyload(data-src=cdn+"/profile_pictures/"+val.actor.profile.picture)
                    span=val.actor.profile.name
                  .menu
                    each person in script
                      if person.actor
                        .item(data-value='1')
                            img.ui.avatar.image.lazyload(data-src=cdn+"/profile_pictures/"+person.actor.profile.picture)
                            span=person.actor.profile.name
              .normalActorIcon
                a(href='/user/'+val.actor.username)
                  img.ui.avatar.image.lazyload(data-src=cdn+"/profile_pictures/"+val.actor.profile.picture)
                  span=val.actor.profile.name
            else
              a(href='/user/'+val.actor.username)
                img.ui.avatar.image.lazyload(data-src=cdn+"/profile_pictures/"+val.actor.profile.picture)
                span=val.actor.profile.name
                //-.item(data-value='0')
                  a(href='/user/NoahM1121')
                    img.ui.avatar.image(src='/profile_pictures/image-7.png')
                    span='Another User'
          if user.isAdmin
            .content.varDropdowns(style='display: none;')
              .var.ui.selection.dropdown.expGroup
                input(type='hidden', name='expGroup')
                i.dropdown.icon
                .default.text
                  span=val.experiment_group
                .menu
                  each x in study.experiment_groups
                    .item(data-value=x.var)
                      span=x.var
              .var.ui.selection.dropdown.class
                input(type='hidden', name='class')
                i.dropdown.icon
                .default.text
                  span=val.class
                .menu
                  each x in study.classes
                    .item(data-value=x.var)
                      span=x.var
          //-div(style="position: relative; z-index: 1;")
            img(src="image.png" style="position: absolute; z-index: 2;")
            span#overlay_text(style="position: relative; top: -10px; z-index: 3;") OVERLAY
          .img.post
            //-img.post(src="/"+val.picture)
            //img(src='/public/picture.svg', data-src="/post_pictures/"+val.picture, style="max-width:100%;width:100%;")
            img.lazyload.post(data-src=cdn+"/post_pictures/"+val.picture, style="max-width:100%;width:100%;")
          .content
            .description=val.body
          .four.ui.bottom.attached.icon.buttons
            .ui.adminSave.button(tabindex='0', style='display: none;')
              i.edit.icon
              | Save
            .ui.reply.button(tabindex='0')
              i.reply.icon
              |  Reply
            .ui.flag.button(tabindex='0')
              i.flag.icon
              |  Flag
            if val.like
              .ui.labeled.button(tabindex='0')
                .ui.red.like.button
                  i.heart.icon
                  |  Like
                a.ui.basic.red.left.pointing.label=val.likes
            else
              .ui.labeled.button(tabindex='0')
                .ui.like.button
                  i.heart.icon
                  |  Like
                a.ui.basic.red.left.pointing.label.count=val.likes
          if val.comments.length > 0
            .content
              .ui.comments
                each comment in val.comments
                  //-IF this comment is USER made, do this
                  if (user.createdAt.getTime() + comment.time) < Date.now()
                    if comment.new_comment
                      -console.log("New COMMENT AREA");
                      .comment(commentID=comment.new_comment_id)
                        a.avatar.image(href='/me')
                          if user.profile.picture
                            img(src='/user_post/'+user.profile.picture)
                          else
                            img(src=user.gravatar(60))
                        .content
                          a.author(href='/me')=user.profile.name || user.username || user.id
                          .metadata
                            span.date=(user.createdAt.getTime() + comment.time)
                            .rating
                              i.heart.icon
                              span.num=0
                              |  Likes
                          .hiddendate(hidden='true')= (user.createdAt.getTime() + comment.time)
                          .text=comment.body
                          .actions
                            a.like.comment Like
                            a.flag.comment Flag
                    //- Else this is a normal comment from the script
                    else
                      .comment(commentID=comment.id)
                        a.avatar(href='/user/'+comment.actor.username)
                          //-img(src=cdn+'/profile_pictures/'+comment.actor.profile.picture)
                          img.lazyload(data-src=cdn+"/profile_pictures/"+comment.actor.profile.picture)
                        .content
                          a.author(href='/user/'+comment.actor.username)=comment.actor.profile.name
                          .metadata
                            span.date=(user.createdAt.getTime() + comment.time)
                            .rating
                              if comment.liked
                                i.red.heart.icon
                                span=comment.likes
                                |  Likes
                              else
                                i.heart.icon
                                span.num=comment.likes
                                |  Likes
                          .hiddendate(hidden='true')= (user.createdAt.getTime() + comment.time)
                          .text.commentText=comment.body
                          .actions
                            if comment.liked
                              a.red.like.comment Like
                            else
                              a.like.comment Like
                            a.flag.comment Flag
          .extra.content
            .ui.fluid.left.labeled.right.icon.input
              .ui.label
                if user.profile.picture
                  img.ui.avatar.image(src='/user_post/'+user.profile.picture, name=user.profile.name || user.username || user.id)
                else
                  img.ui.avatar.image(src=user.gravatar(60), name=user.profile.name || user.username || user.id)
              input.newcomment(type='text', placeholder='Write a Comment')
              i.big.send.link.icon
          //-.extra.content(tabindex='0', style='display: none;')
          .ui.red.bottom.attached.adminDelete.icon.button(tabindex='0', style='display: none;')
            i.trash.alternate.outline.icon
            | Delete Post

    .ui.fluid.card
      .content
        .description
        |  End of Posts for the last 48 hours.
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    br
    .ui.tiny.post.modal()
      i.close.icon
      .header Add a New Post
      .content
        form#postform.ui.feed.form(action='/post/new', method='POST', enctype='multipart/form-data')
          input(type='hidden', name='_csrf', value=_csrf)
          .field
            textarea(rows='2', placeholder='Share your meal', name='body')
          .field.image-upload
            label(for='picinput')
              .image.content
                img#imgInp.ui.fluid.image(src='/public/photo-camera.svg')
            //-input#picinput(type='file', accept='image/*', capture='camera', name='picinput')
            input#picinput(type='file', accept='image/*', name='picinput')
          .ui.error.message
      .actions
        input.ui.green.button(type='submit', name="foo", value='Submit', form='postform')

    .ui.tiny.adminpost.modal()
      i.close.icon
      .header Create a New Actor Post
      .content
        form#adminpostform.ui.adminfeed.form(action='/adminpost/new', method='POST', enctype='multipart/form-data')
          input(type='hidden', name='_csrf', value=_csrf)
          .field
            .actor.ui.selection.dropdown
              input(type='hidden', name='user')
              i.dropdown.icon
              .default.text
                span='Pick an actor'
              .menu
                each person in script
                  if person.actor
                    .item(data-value=person.actor.profile.name)
                        img.ui.avatar.image.lazyload(data-src=cdn+"/profile_pictures/"+person.actor.profile.picture)
                        span=person.actor.profile.name
          .description How many days:hours:mins ago was the post made?
          .field
            textarea(rows='1', placeholder='0:0:0', name='time', pattern='[0-99]:[0-99]:[0-99]')
          .description Create a caption
          .field
            textarea(rows='2', placeholder='Share your meal', name='caption')
          .description How many likes on the post?
          .field
            textarea(rows='1', placeholder='0', name='likes')
          .description What's the experiment group?
          .field
            .var.ui.selection.dropdown
              input(type='hidden', name='expGroup')
              i.dropdown.icon
              .default.text
                span='Pick an experiment group'
              .menu
                each val in study.experiment_groups
                  .item(data-value=val.var)
                    span=val.var+': '+val.description
          .description What's the class?
          .field
            .var.ui.selection.dropdown
              input(type='hidden', name='class')
              i.dropdown.icon
              .default.text
                span='Pick a class'
              .menu
                each val in study.classes
                  .item(data-value=val.var)
                    span=val.var+': '+val.description
          .field.image-upload
            label(for='adminpicinput')
              .image.content
                img#imgInpAdminPost.ui.fluid.image(src='/public/photo-camera.svg')
            //-input#picinput(type='file', accept='image/*', capture='camera', name='picinput')
            input#adminpicinput(type='file', accept='image/*', name='adminpicinput')
          .ui.error.message
      .actions
        input.ui.green.button(type='submit', name="foo", value='Submit', form='adminpostform')

    .ui.tiny.update.modal()
      i.close.icon
      .header Change Post Photo
      .content
        form#updateform.ui.update.form(action='/update_post_photo', method='POST', enctype='multipart/form-data')
          input(type='hidden', name='_csrf', value=_csrf)
          .field.image-upload
            label(for='newpic')
              .image.content
                img#imgInpAdmin.ui.fluid.image(src='/public/photo-camera.svg')
            //-input#picinput(type='file', accept='image/*', capture='camera', name='picinput')
            input#newpic(type='file', accept='image/*', name='newpic')
          .ui.error.message
      .actions
        input.ui.green.button(type='submit', name="new", value='Submit', form='updateform')

    .ui.tiny.deletePost.modal()
      i.close.icon
      .header Delete post?
      .content
        .description This action cannot be undone. Are you sure you want to delete this post?
      .actions
        input.ui.blue.cancelDelete.button(type='submit', value='Cancel')
        input.ui.confirmDelete.button(type='submit', value='Delete Post')
